import { $, Kind, Combinator, Conditional, Function, NaturalNumber } from '..'

/**
 * Represents the Collatz function, which is defined as follows:
 * If the input number is even, it is divided by 2.
 * If the input number is odd, it is multiplied by 3 and then incremented by 1.
 */
export type Collatz = $<
  $<$<Conditional.If, NaturalNumber.IsEven>, $<NaturalNumber.DivideBy, 2>>,
  $<Kind.Pipe, [$<NaturalNumber.Multiply, 3>, NaturalNumber.Increment]>
>

/**
 * Represents the Collatz sequence, which is a sequence of numbers generated by repeatedly applying the Collatz function,
 * starting from a given number, until reaching 1.
 */
export type CollatzSequence = $<
  Combinator.FixSequence,
  $<
    $<$<Conditional.If, $<Conditional.Equals, 1>>, $<Function.Constant, 1>>,
    Collatz
  >
>
